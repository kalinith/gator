// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: feeds.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (id,created_at,updated_at,name,url,last_fetched_at)
VALUES (
$1,
$2,
$3,
$4,
$5,
NULL)
RETURNING id, created_at, updated_at, name, url, last_fetched_at
`

type CreateFeedParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.LastFetchedAt,
	)
	return i, err
}

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :one
 SELECT id, created_at, updated_at, name, url, last_fetched_at
  FROM feeds
  Order by last_fetched_at Desc NULLS FIRST, name ASC
  LIMIT 1
`

func (q *Queries) GetNextFeedToFetch(ctx context.Context) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getNextFeedToFetch)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.LastFetchedAt,
	)
	return i, err
}

const markFeedFetched = `-- name: MarkFeedFetched :exec
 UPDATE feeds
  SET last_fetched_at = $1,
  updated_at = $1
  WHERE ID = $2
`

type MarkFeedFetchedParams struct {
	LastFetchedAt sql.NullTime
	ID            uuid.UUID
}

func (q *Queries) MarkFeedFetched(ctx context.Context, arg MarkFeedFetchedParams) error {
	_, err := q.db.ExecContext(ctx, markFeedFetched, arg.LastFetchedAt, arg.ID)
	return err
}

const selectFeedURL = `-- name: SelectFeedURL :one
SELECT ID, name, url
  FROM feeds
  WHERE url = $1
`

type SelectFeedURLRow struct {
	ID   uuid.UUID
	Name string
	Url  string
}

func (q *Queries) SelectFeedURL(ctx context.Context, url string) (SelectFeedURLRow, error) {
	row := q.db.QueryRowContext(ctx, selectFeedURL, url)
	var i SelectFeedURLRow
	err := row.Scan(&i.ID, &i.Name, &i.Url)
	return i, err
}

const selectFeeds = `-- name: SelectFeeds :many
SELECT f.name AS FeedName,f.url AS URL,u.name AS UserName
  FROM feeds f INNER JOIN feed_follows
  ON f.ID = feed_follows.feed_id
  INNER JOIN users u
  ON feed_follows.user_id = u.id
`

type SelectFeedsRow struct {
	Feedname string
	Url      string
	Username string
}

func (q *Queries) SelectFeeds(ctx context.Context) ([]SelectFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, selectFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectFeedsRow
	for rows.Next() {
		var i SelectFeedsRow
		if err := rows.Scan(&i.Feedname, &i.Url, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
